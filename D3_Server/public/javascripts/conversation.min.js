 (function (){
     if(id=="pet")
         first();
     else
         sankey_bu();
 })();

var reset_clear = 30;
 //var reset_active=1;
 var myReset, myActive;
var colList = new Array;
var colVals = d3.scale.category20();
for(i = 0; i < 15; i++)
    colList[i] = colVals(i);

function wrap(text, width,realY,realX) {
  text.each(function() {
    var text = d3.select(this),
        words = text[0][0].__data__.name.split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 0,
        lineHeight = 0.55, // ems
        x = text.attr("x"),
        y = realY,
        dy = .55,
        tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");
      if(text.attr("class")=="label") x=0;
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", "1.45964em").text(word);
      }
    }
      
  });
}


function wrap2(text, width) {
    text.each(function() {
        var i=0;
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 0,
        lineHeight = 1.1, // ems
        y = text.attr("y")-45,
        x = text.attr("x"),
        dy = .55,
        tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em").attr("class", function(d,i){
            "tspan"+i;
        });
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
      }
    }
  });
}





function first(){
    d3.select('body').style('width',1000)
    d3.select("#myPlot").attr("hidden",true);
    var temp = test;
    var L = {
            node: null,
            map: {}
        }
      , k = {};
    temp.forEach(function(item,index,array){
        var link=new Array;
        link.push(petkeyword[index].keyword1+index);
        link.push(petkeyword[index].keyword2+index);
        link.push(petkeyword[index].keyword3+index);
        item.links = link;
    });
    d3.json("/wp-content/themes/conversation_theme/metadata.php", function(X, Y) {
        Y.episodes = temp;
        Y.episodes.forEach(function(item, index, array){
            if(item.links.length<3){
                item.links.push(petkeyword[index].keyword1+index);
                item.links.push(petkeyword[index].keyword2+index);
                item.links.push(petkeyword[index].keyword3+index);
            }
        })
        petkeyword.forEach(function(item,index,array){
            var temptheme1 = {
                "type": "theme",
                "name": petkeyword[index].keyword1+index,
                "description": "",
                "slug": petkeyword[index].slug
              }
            var temptheme2 = {
                "type": "theme",
                "name": petkeyword[index].keyword2+index,
                "description": "",
                "slug": petkeyword[index].slug
              }
            var temptheme3 = {
                "type": "theme",
                "name": petkeyword[index].keyword3+index,
                "description": "",
                "slug": petkeyword[index].slug
              }
            Y.themes.push(temptheme1);
            Y.themes.push(temptheme2);
            Y.themes.push(temptheme3);
        })
        T = d3.map(Y);
        q = d3.merge(T.values());
        x = {};
        A = d3.map();
        q.forEach(function(aa) {

            aa.key = p(aa.name);


            aa.canonicalKey = aa.key;
            x[aa.key] = aa;
            if (aa.group) {
                if (!A.has(aa.group)) {
                    A.set(aa.group, [])
                }
                A.get(aa.group).push(aa)
            }
        });
        j = d3.map();
        T.get("episodes").forEach(function(aa) {
            aa.links = aa.links.filter(function(ab) {
                return typeof x[p(ab)] !== "undefined" && ab.indexOf("r-") !== 0
            });
            j.set(aa.key, aa.links.map(function(ab) {
                var ac = p(ab);
                if (typeof j.get(ac) === "undefined") {
                    j.set(ac, [])
                }
                j.get(ac).push(aa);
                return x[ac]
            }))
        });
   d3.selectAll('#graph').remove();
   d3.select('svg').append('div').attr('id','mainBubble');
   var w2 = window.innerWidth*0.68*0.95;
   var h2 = Math.ceil(w2*0.7);
   var oR = 0;
   var nTop = 0;
    
    
   var svgContainer = d3.select("#mainBubble")
      .style("height", h2*1.3+"px");
    
  var svg = d3.select("#main").append("svg")
             .attr("class", "mainBubbleSVG")
             .attr("width", w2 * 1.4)
             .attr("height", h2 * 1.7)
        .on("mouseleave", function() {return resetBubbles();});
         
    var firstDraw = function(selection){
       selection
            .attr("class", "topBubble")
            .attr("id", function(d,i) {return "topBubble" + i;})
            .attr("r", function(d) { return oR; })
            .attr("cx", function(d, i) {return oR*(5*(1+i%3)-1);})
            .attr("cy", function(d, i) {return ((h2+oR)*(Math.floor(i/3)+0.4)/5)+50;})
            .style("opacity",0.3);
   }
   
   var firstText = function(selection,oR){
       selection
            .attr("class", "topBubbleText")
            .attr("x", function(d, i) {return oR*(5*(1+i%3)-1);})
            .attr("y", function(d, i) {return ((h2 +oR)*(Math.floor(i/3)+0.4)/5)+50;})
            .attr("oriX", function(d, i) {return oR*(5*(1+i%3)-1);})
            .attr("oriY", function(d, i) {return ((h2 +oR)*(Math.floor(i/3)+0.4)/5)+50;})
            .attr("font-size", 12)
            .attr("text-anchor", "middle")
        .attr("dominant-baseline", "middle")
        .attr("alignment-baseline", "middle")
            .text(function(d) {return d.name});
   }
   
   var firstSmallCircle = function(selection,iB,oR,h2){
       selection
            .attr("class", "childBubble" + iB)
            .attr("id", function(d,i) {return "childBubble_" + iB + "sub_" + i;})
            .attr("r",  function(d) {return oR/3.0;})
            .attr("cx", function(d,i) {return (oR*(5*(iB%3+1)-1) + oR*1.5*Math.cos((i-1)*45/180*3.1415926));})
            .attr("cy", function(d,i) {return ((h2+oR)*(Math.floor(iB/3)+0.4)/5 +        oR*1.5*Math.sin((i-1)*45/180*3.1415926))+50;})
            .attr("cursor","pointer")
            .style("opacity",0.5);
   }
   
   var firstSmallText = function(selection,iB,oR,h2){
       selection
            .attr("class", "childBubbleText" + iB)
            .attr("x", function(d,i) {return (oR*(5*(iB%3+1)-1) + oR*1.5*Math.cos((i-1)*45/180*3.1415926));})
            .attr("y", function(d,i) {return ((h2+oR)*(Math.floor(iB/3)+0.4)/5 +        oR*1.5*Math.sin((i-1)*45/180*3.1415926))+50;})
            .style("opacity",0.5)
            .attr("text-anchor", "middle")
            .attr("font-size", 6)
            .attr("cursor","pointer")
            .attr("dominant-baseline", "middle")
        .attr("alignment-baseline", "middle")
            .text(function(d) {return d.name})      
   }
 
    d3.json("./data/main_bubble.json", function(error, root) {
        var test2 = test;
        for (var i =0; i<15; i++){
            root.children[i].name=test2[i].name;
            root.children[i].children[0].name = petkeyword[i].keyword1
            root.children[i].children[1].name = petkeyword[i].keyword2
            root.children[i].children[2].name = petkeyword[i].keyword3
        }
     
        var bubbleObj = svg.selectAll(".topBubble")
                .data(root.children)
                .enter().append("g")
                .attr("id", function(d,i) {return "topBubbleAndText_" + i});
             
        nTop = root.children.length/3;
        oR = w2/(1+3*nTop);
 
    h2 = Math.ceil(w2/nTop*4);
    svgContainer.style("height",h2*1.1+"px");
         
        bubbleObj.append("circle")
            .style("fill", function(d,i) { //colList.push(colVals(i));
                                            return colVals(i); }) // #1f77b4
            .on("mouseover", function(d,i) {return activateBubble(d,i);})
            .transition().duration(350).call(firstDraw);
         
             
        bubbleObj.append("text")
        .style("fill", function(d,i) { return colVals(i); }) // #1f77b4
            .on("mouseover", function(d,i) {return activateBubble(d,i);})
            .transition().duration(350).call(firstText,oR);
        
        setTimeout(function(){d3.selectAll(".topBubbleText").call(wrap2,oR);},1000);
                
         
        for(var iB = 0; iB < nTop*3; iB++)
        {
            var childBubbles = svg.selectAll(".childBubble" + iB)
                .data(root.children[iB].children)
                .enter().append("g");
                 
        //var nSubBubble = Math.floor(root.children[iB].children.length/2.0);   
             
            childBubbles.append("circle")
                .style("fill", "#eee")
                .attr("number", iB)
                .on("click", function(d,i){return bubClick(d,i,d3.select(this).attr("number"));})
            .on("mouseover", function(d,i) {
              //window.alert("say something");
              }).transition().duration(350).call(firstSmallCircle,iB,oR,h2);
 
            childBubbles.append("text")
            .style("fill", function(d,i) { return colVals(iB); }) // #1f77b4
                .on("click", function(d,i){return bubClick(d,i,d3.select(this).attr("number"));})
            .transition().duration(350).call(firstSmallText,iB,oR,h2); 
 
        }  
        
        var ts;
        setTimeout(function(){
            ts = d3.selectAll("tspan");
            ts[0].forEach(function(d,i){
                var hgt = d3.select(d).attr("dy").split("em");
                if(hgt[0]==7.15){
                    var tp = d3.select(d).text();
                    d3.select(d).text(tp+" ...");
                }
                if(hgt[0]>8)
                d3.select(d).attr("hidden",true);
            })
        },1001);
       
    });
 
    resetBubbles = function () {
             //             clearInterval(myActive);
             //             reset_active=1;
             w2 = window.innerWidth * 0.68 * 0.95;
             oR = w2 / (1 + 3 * nTop);

             h2 = Math.ceil(w2 / nTop * 4);
             svgContainer.style("height", h2 * 1.3 + "px");

             svg.attr("width", w2 * 1.4);
             svg.attr("height", h2 * 1.7);

             var t = svg.transition()
                 .duration(350);

             t.selectAll(".topBubble")
                 .attr("r", function (d) {
                     return oR;
                 })
                 .attr("cx", function (d, i) {
                     return oR * (5 * (1 + i % 3) - 1);
                 })
                 .attr("cy", function (d, i) {
                     return ((h2 + oR) * (Math.floor(i / 3) + 0.4) / 5) + 50;
                 })

             var tt = t.selectAll(".topBubbleText")
                 .attr("font-size", 12)
                 .attr("x", function (d, i) {
                     return oR * (5 * (1 + i % 3) - 1);
                 })
                 .attr("y", function (d, i) {
                     return ((h2 + oR) * (Math.floor(i / 3) + 0.4) / 5) + 50;
                 })

             var ttt = tt.selectAll("tspan");
             ttt.forEach(function (d, i) {
                 d.forEach(function (d, ii) {
                     var tempX = d3.select(tt[0][i]).attr("oriX");
                     var tempY = d3.select(tt[0][i]).attr("oriY");
                     d3.select(d).attr("x", tempX);
                     d3.select(d).attr("y", tempY - 45);
                 })
             })
             for (var k = 0; k < nTop * 3; k++) {
                 t.selectAll(".childBubbleText" + k)
                     .attr("x", function (d, i) {
                         return (oR * (5 * (k % 3 + 1) - 1) + oR * 1.5 * Math.cos((i - 1) * 45 / 180 * 3.1415926));
                     })
                     .attr("y", function (d, i) {
                         return ((h2 + oR) * (Math.floor(k / 3) + 0.4) / 5 + oR * 1.5 * Math.sin((i - 1) * 45 / 180 * 3.1415926)) + 50;
                     })
                     .attr("font-size", 6)
                     .style("opacity", 0.5);

                 t.selectAll(".childBubble" + k)
                     .attr("r", function (d) {
                         return oR / 3.0;
                     })
                     .style("opacity", 0.5)
                     .attr("cx", function (d, i) {
                         return (oR * (5 * (k % 3 + 1) - 1) + oR * 1.5 * Math.cos((i - 1) * 45 / 180 * 3.1415926));
                     })
                     .attr("cy", function (d, i) {
                         return ((h2 + oR) * (Math.floor(k / 3) + 0.4) / 5 + oR * 1.5 * Math.sin((i - 1) * 45 / 180 * 3.1415926)) + 50;
                     })

             }
             var ts;
             ts = d3.selectAll("tspan");
             ts[0].forEach(function (d, i) {
                 var hgt = d3.select(d).attr("dy").split("em");
                 if (hgt[0] > 8)
                     d3.select(d).attr("hidden", true);
             })

         }
         
         
        function activateBubble(d, i) {

             // increase this bubble and decrease others
             var t = svg.transition()
                 .duration(d3.event.altKey ? 7500 : 350);
             t.selectAll(".topBubble")
                 /*
                                 .attr("cx", function(d,ii){
                                     if(i == ii) {
                                         // Nothing to change
                                         return oR*(3*(1+ii)-1) - 0.6*oR*(ii-1);
                                     } else {
                                         // Push away a little bit
                                         if(ii < i){
                                             // left side
                                             return oR*0.6*(3*(1+ii)-1);
                                         } else {
                                             // right side
                                             return oR*(nTop*3+1) - oR*0.6*(3*(nTop-ii)-1);
                                         }
                                     }               
                                 })*/
                 .attr("r", function (d, ii) {
                     if (i == ii)
                         return oR * 1.8;
                     else
                         return oR * 1;
                 })
                 .attr("cx", function (d, i) {
                     return oR * (5 * (1 + i % 3) - 1) * 1.3;
                 })
                 .attr("cy", function (d, i) {
                     return ((h2 + oR) * (Math.floor(i / 3) + 0.4) / 5) * 1.3 + 100;
                 })

             var tt = t.selectAll(".topBubbleText")
                 /*
                                 .attr("x", function(d,ii){
                                     if(i == ii) {
                                         // Nothing to change
                                         return oR*(3*(1+ii)-1) - 0.6*oR*(ii-1);
                                     } else {
                                         // Push away a little bit
                                         if(ii < i){
                                             // left side
                                             return oR*0.6*(3*(1+ii)-1);
                                         } else {
                                             // right side
                                             return oR*(nTop*3+1) - oR*0.6*(3*(nTop-ii)-1);
                                         }
                                     }               
                                 })          */
                 .attr("font-size", function (d, ii) {
                     if (i == ii)
                         return 30 * 0.6;
                     else
                         return 30 * 0.3;
                 })
                 .attr("x", function (d, i) {
                     return (oR * (5 * (1 + i % 3) - 1)) * 1.3;
                 })
                 .attr("y", function (d, i) {
                     return (((h2 + oR) * (Math.floor(i / 3) + 0.2) / 5)) * 1.3 + 100;
                 })
            
            var ttt = tt.selectAll("tspan").transition().duration(2050);
        ttt.forEach(function(d,i){
            d.forEach(function(d,ii){
                var tt = t.selectAll(".topBubbleText")
                var tempX = d3.select(tt[0][i]).attr("oriX");
                var tempY = d3.select(tt[0][i]).attr("oriY");
                d3.select(d).attr("x", function (d) {
                     return (oR * (5 * (1 + i % 3) - 1)) * 1.3;
                 })
                 .attr("y", function (d) {
                     return (((h2 + oR) * (Math.floor(i / 3) + 0.2) / 5)) * 1.3 + 100;
                 })
            })
        })

             var signSide = -1;
             for (var k = 0; k < nTop * 3; k++) {
                 signSide = 1;
                 if (k < nTop * 3 / 2) signSide = 1;
                 t.selectAll(".childBubbleText" + k)
                     .attr("x", function (d, i) {
                         return (oR * (5 * (k % 3 + 1) - 1) - 0.01 * oR * (k % 5 - 1) + signSide * oR * 2.5 * Math.cos((i - 1) * 45 / 180 * 3.1415926)) * 1.3 - 45;
                     })
                     .attr("y", function (d, i) {
                         return ((h2 + oR) * (Math.floor(k / 3) + 0.4) / 5 + signSide * oR * 2.5 * Math.sin((i - 1) * 45 / 180 * 3.1415926)) * 1.3 + 100;
                     })
                     .attr("font-size", function () {
                         return (k == i) ? 12 : 6;
                     })
                     .style("opacity", function () {
                         return (k == i) ? 1 : 0;
                     });

                 t.selectAll(".childBubble" + k)
                     .attr("cx", function (d, i) {
                         return (oR * (5 * (k % 3 + 1) - 1) - 0.01 * oR * (k % 5 - 1) + signSide * oR * 2.5 * Math.cos((i - 1) * 45 / 180 * 3.1415926)) * 1.3 - 45;
                     })
                     .attr("cy", function (d, i) {
                         return ((h2 + oR) * (Math.floor(k / 3) + 0.4) / 5 + signSide * oR * 2.5 * Math.sin((i - 1) * 45 / 180 * 3.1415926)) * 1.3 + 100;
                     })
                     .attr("r", function () {
                         return (k == i) ? (oR * 0.55) : (oR / 3.0);
                     })
                     .style("opacity", function () {
                         return (k == i) ? 1 : 0;
                     });
             }
         }
     
    window.onresize = resetBubbles;
      
        
    function themeClick(d, i){
            $.ajax({
                type: "POST",
                url: "/time",
                dataType: "text",
                data: {"keyword":d.name.substr(0,d.name.length-1)
                      },
                success: function(results){
                    if(results.length==2){
                        alert("해당 키워드에 대한 의안이 존재하지 않습니다.")
                        return;
                    }
                    d3.select("#graph").remove();
                    d3.select("#myPlot").attr("hidden",null).style("width","0px");
                    //timeline plz
                    original2=eval(results);
                    tChart(results);
                }
            });
        
        }

    function bubClick(d, i, iB){
        var clicked;
        var iter=0;
        for (iter=0;iter<Y.themes.length; iter++){
           if(Y.themes[iter].name == d.name+iB)
                break;
        }
        clicked = Y.themes[iter];
        if(clicked.slug==undefined){
            alert('자료를 로딩 중입니다. 잠시 후 재시도해주십시오.');
            return;
        }
        conceptMap(clicked,colList[clicked.slug]);
        }
    
    function conceptMap(clicked,col){
        d3.select(".mainBubbleSVG").remove();
        var tmp=d3.select("#main").append('div').attr("id","graph");
    var a = 1000
      , c = 900
      , h = c
      , U = 200
      , K = 40
      , S = 20
      , s = 8
      , R = 110
      , J = 30
      , o = 15
      , t = 10
      , w = 1000
      , F = "elastic"
      , N = "#0da4d3";
    var T, q, x, j, H, A, P;
    var L = {}
      , k = {};
    var i, y;
    var r = d3.layout.tree().size([360, h / 2 - R]).separation(function(Y, X) {
        return (Y.parent == X.parent ? 1 : 2) / Y.depth
    });
    var W = d3.svg.diagonal.radial().projection(function(X) {
        return [X.y, X.x / 180 * Math.PI]
    });
    var v = d3.svg.line().x(function(X) {
        return X[0]
    }).y(function(X) {
        return X[1]
    }).interpolate("bundle").tension(0.5);
    var d = d3.select("#graph").append("svg").attr("width", a).attr("height", c).append("g").attr("transform", "translate(" + a / 2 + "," + c / 2 + ")").attr("id",main);
    var I = d.append("rect").attr("class", "bg").attr({
        x: a / -2,
        y: c / -2,
        width: a,
        height: c,
        fill: "transparent"
    }).on("click", first);
    
    var B = d.append("g").attr("class", "links")
      , f = d.append("g").attr("class", "episodes")
      , E = d.append("g").attr("class", "nodes");
    var Q = d3.select("#graph-info");
    
    /*var temp = test;
    temp.forEach(function(item,index,array){
        var link = new Array;
        link.push(petkeyword[index].keyword1);
        link.push(petkeyword[index].keyword2);
        link.push(petkeyword[index].keyword3);
        item.links = link;
    });*/
    
    
    d3.json("/wp-content/themes/conversation_theme/metadata.php", function(X, Y) {
        petkeyword.forEach(function(item,index,array){
            var temptheme1 = {
                "type": "theme",
                "name": petkeyword[index].keyword1+index,
                "description": "",
                "slug": petkeyword[index].slug
              }
            var temptheme2 = {
                "type": "theme",
                "name": petkeyword[index].keyword2+index,
                "description": "",
                "slug": petkeyword[index].slug
              }
            var temptheme3 = {
                "type": "theme",
                "name": petkeyword[index].keyword3+index,
                "description": "",
                "slug": petkeyword[index].slug
              }
            Y.themes.push(temptheme1);
            Y.themes.push(temptheme2);
            Y.themes.push(temptheme3);
        })
        
        Y.episodes = temp;
        T = d3.map(Y);
        q = d3.merge(T.values());

        
        
        x = {};
        A = d3.map();
        q.forEach(function(aa) {

            aa.key = p(aa.name);


            aa.canonicalKey = aa.key;
            x[aa.key] = aa;
            if (aa.group) {
                if (!A.has(aa.group)) {
                    A.set(aa.group, [])
                }
                A.get(aa.group).push(aa)
            }
        });
        j = d3.map();
        T.get("episodes").forEach(function(aa) {
            aa.links = aa.links.filter(function(ab) {
                return typeof x[p(ab)] !== "undefined" && ab.indexOf("r-") !== 0
            });
            j.set(aa.key, aa.links.map(function(ab) {
                var ac = p(ab);
                if (typeof j.get(ac) === "undefined") {
                    j.set(ac, [])
                }
                j.get(ac).push(aa);
                return x[ac]
            }))
        });
        var Z = window.location.hash.substring(1);  // hash string을 이용함.
        //console.log(Z);
        if (Z && x[Z]) {
            G(x[Z])
        } else {
            O();
            M()
        }
        window.onhashchange = function() {
            var aa = window.location.hash.substring(1);
            if (aa && x[aa]) {
                G(x[aa], true)
            }
        }
        console.log(Y);
        G(clicked,false,col);
    });
    function O() {
        var lawDecision;
        //console.log("O function");
        if (L.node === null) {
            return
        }
        L = {
            node: null,
            map: {}
        };
        i = Math.floor(630 / T.get("episodes").length);
        y = Math.floor(T.get("episodes").length * i / 2);
        T.get("episodes").forEach(function(af, ae) {
            if (af.name != 'LawDecision') {
                af.x = U / -2;
                af.y = ae * i - y
            } else {
                lawDecision = af;
                T.get("episodes").forEach(function(item, index, array) {
                    if (item.name == 'LawDecision') {
                        T.get("episodes").splice(index, 1);
                    }
                })
            }
        });
        var ad = 0 + J
          , Z = 360 - J
          , ac = (Z - ad) / (T.get("themes").length - 1);
        T.get("themes").forEach(function(af, ae) {
                af.x = Z - ae * ac;
                af.y = h / 2 - R;
                af.xOffset = -S;
                af.depth = 1
        });
        ad = J;
        Z = 180 - J;
//        ac = (Z - ad) / (T.get("perspectives").length - 1);
//        T.get("perspectives").forEach(function(af, ae) {
//            af.x = ae * ac + ad;
//            af.y = h / 2 - R;
//            af.xOffset = S;
//            af.depth = 1
//        });
        H = [];
        var ab, Y, aa, X = h / 2 - R;
        T.get("episodes").forEach(function(ae) {
            ae.links.forEach(function(af) {
                ab = x[p(af)];
                if (!ab || ab.type === "reference") {
                    return
                }
                Y = ((ab.x - 90) * Math.PI / 180);
                aa = ae.key + "-to-" + ab.key;
                H.push({
                    source: ae,
                    target: ab,
                    key: aa,
                    canonicalKey: aa,
                    x1: ae.x + (ab.type === "theme" ? 0 : U),
                    y1: ae.y + K / 2,
                    x2: Math.cos(Y) * X + ab.xOffset,
                    y2: Math.sin(Y) * X
                })
            })
        });
        P = [];
        A.forEach(function(af, ag) {
            var ae = (ag[0].x - 90) * Math.PI / 180;
//console.log(ag[1]);
            a2 = (ag[1].x - 90) * Math.PI / 180,

            bulge = 20;
            P.push({
                x1: Math.cos(ae) * X + ag[0].xOffset,
                y1: Math.sin(ae) * X,
                xx: Math.cos((ae + a2) / 2) * (X + bulge) + ag[0].xOffset,
                yy: Math.sin((ae + a2) / 2) * (X + bulge),
                x2: Math.cos(a2) * X + ag[1].xOffset,
                y2: Math.sin(a2) * X
            })
        });
        window.location.hash = "";
        M()
    }
    function G(Y, X, col) {
        console.log("G func");
        var clicked = Y;
        var simnews;
        var simjud;
        var simlaw;
        if(typeof(Y.name)=='string'){
            var name = Y.name
            if(name.substring(name.length, name.length-1)*1>=0 && name.substring(name.length, name.length-1)*1<=5 && name.substring(0, name.length-1) == "기사"){
                $.ajax({
                type: "POST",
                url: "/last/pet",
                dataType: "text",
                data: {"keyword":Y.parent.parent.name.substring(0,Y.parent.parent.name.length-1)},
                success: function(results){
                        simnews=JSON.parse(JSON.parse(results).simnews)
                        window.open(simnews[(name.substring(name.length, name.length-1)*1)-1].content,"_blank","width=1000,height=600");
                }
                });
            }
            else if(name.substring(name.length, name.length-1)*1>=0 && name.substring(name.length, name.length-1)*1<=5 && name.substring(0, name.length-1) == "판례"){
                $.ajax({
                type: "POST",
                url: "/last/pet",
                dataType: "text",
                data: {"keyword":Y.parent.parent.name.substring(0,Y.parent.parent.name.length-1)},
                success: function(results){
                        simjud=JSON.parse(JSON.parse(results).simjud)
                        window.open(simjud[(name.substring(name.length, name.length-1)*1)-1].url,"_blank","width=1000,height=600");
                }
                });
            }
            else if(name.substring(name.length, name.length-1)*1>=0 && name.substring(name.length, name.length-1)*1<=5 && name.substring(0, name.length-1) == "유사법"){
                $.ajax({
                type: "POST",
                url: "/last/pet",
                dataType: "text",
                data: {"keyword":Y.parent.parent.name.substring(0,Y.parent.parent.name.length-1)},
                success: function(results){
                        simlaw=JSON.parse(JSON.parse(results).simlaw)
                }
                });
                $.ajax({
                    type: "POST",
                    url: "/time",
                    dataType: "text",
                    data: {"keyword":Y.parent.parent.name.substring(0,Y.parent.parent.name.length-1)+Y.name.substring(name.length-1, name.length)},// 수정필요
                    success: function(results){
                        if(results.length==2){
                            alert("해당 키워드에 대한 의안이 존재하지 않습니다.")
                            return;
                        }
                        d3.select("#graph").remove();
                        d3.select("#myPlot").attr("hidden",null).style("width","0px");
                        //timeline plz
                        tChart(results);
                    }
                });
            }
        }
        $.ajax({
                type: "POST",
                url: "/last/pet",
                dataType: "text",
                data: {"keyword":Y.name
                      },
                success: function(results){
                    simnews=JSON.parse(JSON.parse(results).simnews)
                    simjud=JSON.parse(JSON.parse(results).simjud)
                    simlaw=JSON.parse(JSON.parse(results).simlaw)
                }
            });
        
        
        if (L.node === Y && X !== true) {
            if (Y.type === "episode") {
                window.location.href = "/" + Y.slug;
                return
            }
            var realTemp = {name:Y.name};
            themeClick(realTemp,X);
            L.node.children.forEach(function(aa) {
                aa.children = aa._group
            });
            e(col);
            return
        }
        if (Y.isGroup) {
            ///////////////////////// 이 곳을 수정해야 한다. //////////////////////
            var petname=Y.parent.parent.name;
            var keywordType=Y.parent.name;
            L.node.children.forEach(function(aa) {
                aa.children = aa._group
            });
            Y.parent.children = _.cloneDeep(Y.parent._children);
            
            while(Y.parent.children.length<5){
                Y.parent.children.push(_.cloneDeep(Y.parent.children[Y.parent.children.length-1]));
            }
            
            for(var i = 0; i<5; i++){
                Y.parent.children[i].name = Y.parent.links[i];
            }
            Y.parent.children.forEach(function(item){
                item.children.length=0;
            })
            
            e();
            return
        }
        Y = x[Y.canonicalKey];
        

        q.forEach(function(aa) {
            aa.parent = null;
            aa.children = [];
            aa._children = [];
            aa._group = [];
            aa.canonicalKey = aa.key;
            aa.xOffset = 0
        });
        var temp = L.node;
        L.node = Y;
        L.node.children = j.get(Y.canonicalKey);
        L.map = {};
        var Z = 0;
        var circ = _.cloneDeep(L.node.children.slice(0,3));
        while(circ.length<3)
            circ.push(_.cloneDeep(circ[circ.length-1]));
        circ.forEach(function(item,index,array){
            var link = new Array;
            if(index == 0){
                circ[0].name="유사법";
                link.push("유사법1");
                link.push("유사법2");
                link.push("유사법3");
                link.push("유사법4");
                link.push("유사법5");
            }
            if(index == 1){
                circ[1].name="판례";
                link.push("판례1");
                link.push("판례2");
                link.push("판례3");
                link.push("판례4");
                link.push("판례5");
            }
            if(index == 2){
                circ[2].name="기사";
                link.push("기사1");
                link.push("기사2");
                link.push("기사3");
                link.push("기사4");
                link.push("기사5");
            }
            circ[index].links = link;
        });
        
        L.node.children = circ;
        L.node.children.forEach(function(ac) {
            //console.log("해당 인물 주변의 원 만큼 반복한다.즉, 판례등은 여기에 속할 것.");
            L.map[ac.key] = true;
            ac._children = j.get(ac.key).filter(function(ad) {
                return ad.canonicalKey !== Y.canonicalKey
            });
            ac._children = _.cloneDeep(ac._children);
            ac._children.forEach(function(ad) {
                ad.canonicalKey = ad.key;
                ad.key = ac.key + "-" + ad.key;
                L.map[ad.key] = true
            });
            var aa = ac.key + "-group"
              , ab = ac._children.length;
            ac._group = [{
                isGroup: true,
                key: aa + "-group-key",
                canonicalKey: aa,
                name: ab,
                count: ab,
                xOffset: 0
            }];
            L.map[aa] = true;
            Z += ab
        });
        L.node.children.forEach(function(aa) {
            aa.children = Z > 1 ? aa._group : aa._children
        });
        if(clicked.name.substr(0,clicked.name.length-1) == "기사" || clicked.name.substr(0,clicked.name.length-1) == "판례" || clicked.name.substr(0,clicked.name.length-1) == "유사법")
           {
        L.node = temp;
               L.node.children = j.get(Y.canonicalKey);
        L.map = {};
        var Z = 0;
        var circ = JSON.parse(JSON.stringify(L.node.children.slice(0,3)));
        while(circ.length<3)
            circ.push(JSON.parse(JSON.stringify(circ[circ.length-1])));
        circ.forEach(function(item,index,array){
            var link = new Array;
            if(index == 0){
                circ[0].name="유사법";
                link.push("유사법1");
                link.push("유사법2");
                link.push("유사법3");
                link.push("유사법4");
                link.push("유사법5");
            }
            if(index == 1){
                circ[1].name="판례";
                link.push("판례1");
                link.push("판례2");
                link.push("판례3");
                link.push("판례4");
                link.push("판례5");
            }
            if(index == 2){
                circ[2].name="기사";
                link.push("기사1");
                link.push("기사2");
                link.push("기사3");
                link.push("기사4");
                link.push("기사5");
            }
            circ[index].links = link;
        });
        
        L.node.children = circ;
        L.node.children.forEach(function(ac) {
            //console.log("해당 인물 주변의 원 만큼 반복한다.즉, 판례등은 여기에 속할 것.");
            L.map[ac.key] = true;
            ac._children = j.get(ac.key).filter(function(ad) {
                return ad.canonicalKey !== Y.canonicalKey
            });
            ac._children = _.cloneDeep(ac._children);
            ac._children.forEach(function(ad) {
                ad.canonicalKey = ad.key;
                ad.key = ac.key + "-" + ad.key;
                L.map[ad.key] = true
            });
            var aa = ac.key + "-group"
              , ab = ac._children.length;
            ac._group = [{
                isGroup: true,
                key: aa + "-group-key",
                canonicalKey: aa,
                name: ab,
                count: ab,
                xOffset: 0
            }];
            L.map[aa] = true;
            Z += ab
        });
        L.node.children.forEach(function(aa) {
            aa.children = Z > 1 ? aa._group : aa._children
        });
        }
        e()
    }
    function n(d, i) {
        ////console.log("n function");
        k = {
            node: null,
            map: {}
        };
        var TT = d3.select("circle").data();
        var TTT = TT[0];
        z(TTT.col);
    }
    function g(X) {
        ////console.log("g function");
        if (k.node === X) {
            return
        }
        k.node = X;
        k.map = {};
        k.map[X.key] = true;
        if (X.key !== X.canonicalKey) {
            k.map[X.parent.canonicalKey] = true;
            k.map[X.parent.canonicalKey + "-to-" + X.canonicalKey] = true;
            k.map[X.canonicalKey + "-to-" + X.parent.canonicalKey] = true
        } else {
            j.get(X.canonicalKey).forEach(function(Y) {
                k.map[Y.canonicalKey] = true;
                k.map[X.canonicalKey + "-" + Y.canonicalKey] = true
            });
            H.forEach(function(Y) {
                if (k.map[Y.source.canonicalKey] && k.map[Y.target.canonicalKey]) {
                    k.map[Y.canonicalKey] = true
                }
            })
        }
        var TT = d3.select("circle").data();
        var TTT = TT[0];
        z(TTT.col);
    }
    function M() {
        //console.log("M function");
        V();
        B.selectAll("path").attr("d", function(X) {
            return v([[X.x1, X.y1], [X.x1, X.y1], [X.x1, X.y1]])
        }).transition().duration(w).ease(F).attr("d", function(X) {
            return v([[X.x1, X.y1], [X.target.xOffset * s, 0], [X.x2, X.y2]])
        });
        D(T.get("episodes"));
        b(d3.merge([T.get("themes")]));
        C([]);
        m(P);
        n();
        z()
    }
    function e() {  // 청원을 클릭하다.
        var X = r.nodes(L.node);
        X.forEach(function(Z) {
            if (Z.depth === 1) {
                Z.y -= 20
            }
        });
        H = r.links(X);
        //console.log(H);
        H.forEach(function(Z) {
            if (Z.source.type === "episode") {
                Z.key = Z.source.canonicalKey + "-to-" + Z.target.canonicalKey
            } else {
                Z.key = Z.target.canonicalKey + "-to-" + Z.source.canonicalKey
            }
            Z.canonicalKey = Z.key
        });
        V();
        B.selectAll("path").transition().duration(w).ease(F).attr("d", W);
        D([]);
        b(X);
        C([L.node]);
        m([]);
        var Y = "";
        if (L.node.description) {
            //Y = L.node.description
        }
        Q.html(Y);
        n();
        z(col)
    }
    function b(X) {
        //console.log("b function");
        var tt = E.selectAll(".node")
        tt[0].forEach(function(d,i){
            var name = d3.select(d).data()[0].name
            if(d3.select(d).data()[0].type=='theme' && name.substring(name.length, name.length-1)*1>=0 && name.substring(name.length, name.length-1)*1<=5)
              d3.select(d).remove();
        })
        var X = E.selectAll(".node").data(X, u);
        var Y = X.enter().append("g").attr("transform", function(aa) {
            var Z = aa.parent ? aa.parent : {
                xOffset: 0,
                x: 0,
                y: 0,
            };
            return "translate(" + Z.xOffset + ",0)rotate(" + (Z.x - 90) + ")translate(" + Z.y + ")"
        }).attr("class", "node").on("mouseover", g).on("mouseout", n).on("click", G);
        Y.append("circle").attr("r", 0)
        Y.append("text").attr("stroke", "#fff").attr("stroke-width", 4).attr("class", "label-stroke");
        var tt = Y.append("text").attr("font-size", 0).attr("class", "label")
            .attr("realY",function(Z){return Z.y;})
            .attr("realX",function(Z){return Z.x;});
        X.transition().duration(w).ease(F).attr("transform", function(Z) {
            if (Z === L.node) {
                return null
            }
            var aa = Z.isGroup ? Z.y + (7 + Z.count) : Z.y;
            return "translate(" + Z.xOffset + ",0)rotate(" + (Z.x - 90) + ")translate(" + aa + ")"
        });
        X.selectAll("circle").transition().duration(w).ease(F).attr("r", function(Z) {
            if (Z == L.node) {
                return 100
            } else {
                if (Z.isGroup) {
                    return 15 + Z.count
                } else {
                    return 4.5
                }
            }
        })
        
        X.selectAll("text.label").transition().duration(w).ease(F).attr("dy", ".3em").attr("font-size", function(Z) {
            if (Z.depth === 0) {
                return 15
            } else {
                return 14
            }
        }).text(function(Z) {
            if(Z.isGroup) return 5;
            return Z.name
        }).attr("text-anchor", function(Z) {
            if (Z === L.node || Z.isGroup) {
                return "middle"
            }
            return Z.x < 180 ? "start" : "end"
        }).attr("transform", function(Z) {
            if (Z === L.node) {
                return null
            } else {
                if (Z.isGroup) {
                    return Z.x > 180 ? "rotate(180)" : null
                }
            }
            return Z.x < 180 ? "translate(" + t + ")" : "rotate(180)translate(-" + t + ")"
        })
        X.selectAll("text.label-stroke").attr("display", function(Z) {
            return Z.depth === 1 ? "block" : "none"
        });
        setTimeout(function(){Y.selectAll("text.label").call(wrap,150,function(Z){return Z.realY}),function(Z){return Z.realX}},200);
        X.exit().remove()
    }
    function V() {
        //console.log("V function");
        var Y = d3.selectAll("circle");
        var X = B.selectAll("path").data(H, u);
        X.enter().append("path").attr("d", function(Z) {
            var Y = Z.source ? {
                x: Z.source.x,
                y: Z.source.y
            } : {
                x: 0,
                y: 0
            };
            return W({
                source: Y,
                target: Y
            });
        }).attr("class", "link");
        X.exit().remove()
    }
    function C(Z) {
        //console.log("C function");
        var ac = d.selectAll(".detail").data(Z, u);
        var Y = ac.enter().append("g").attr("class", "detail");
        var ab = Z[0];
        if (ab && ab.type === "episode") {
            var aa = Y.append("a").attr("xlink:href", function(ae) {
                return "/" + ae.slug
            });
            aa.append("text").attr("fill", N).attr("font-size",15).attr("text-anchor", "middle").attr("y", (o + t) * -1).text(function(ae) {
                return "청원 " + ae.episode
            })
        } else {
            if (ab && ab.type === "theme") {
                Y.append("text").attr("font-size",15).attr("fill", "#aaa").attr("text-anchor", "middle").attr("y", (o + t) * -1).text("KEYWORD")
            }
        }
        ac.exit().remove();
        //var X = d.selectAll(".all-episodes").data(Z);
        //X.enter().append("text").attr("text-anchor", "start").attr("x", a / -2 + t).attr("y", c / 2 - t).text("all //episodes").attr("class", "all-episodes").on("click", O);
        //X.exit().remove()
    }
    function D(Y) {
        //console.log("D function");
        var Y = f.selectAll(".episode").data(Y, u);
        var X = Y.enter().append("g").attr("class", "episode").on("mouseover", g).on("mouseout", n).on("click", G);
        X.append("rect").attr("x", U / -2).attr("y", K / -2).attr("width", U).attr("height", K-2).transition().duration(w).ease(F).attr("x", function(Z) {
            return Z.x
        }).attr("y", function(Z) {
            return Z.y
        });
        X.append("text").attr("font-size",function(Z){
            return 12;
        }).attr("x", function(Z) {
            return U / -2 + t
        }).attr("y", function(Z) {
            return K / -2 + o
        }).attr("fill", "#fff").text(function(Z) {
            return Z.name
        }).transition().duration(w).ease(F).attr("x", function(Z) {
            return Z.x + t
        }).attr("y", function(Z) {
            return Z.y + 10
        }).attr("realY",function(Z){
            return Z.y;
        }).attr("class","episode");
        Y.selectAll("text").call(wrap,200,function(Z){return Z.realY;},function(Z){return Z.x});
        Y.exit().selectAll("rect").transition().duration(w).ease(F).attr("x", function(Z) {
            return U / -2
        }).attr("y", function(Z) {
            return K / -2
        });
        Y.exit().selectAll("text").transition().duration(w).ease(F).attr("x", function(Z) {
            return U / -2 + t
        }).attr("y", function(Z) {
            return K / -2 + o
        });
        Y.exit().transition().duration(w).remove();
        
    }
    function m(Y) {
        //console.log("m function");
        var X = f.selectAll("path").data(Y);
        X.enter().append("path").attr("d", function(Z) {
            return v([[Z.x1, Z.y1], [Z.x1, Z.y1], [Z.x1, Z.y1]])
        }).attr("stroke", "#000").attr("stroke-width", 1.5).transition().duration(w).ease(F).attr("d", function(Z) {
            return v([[Z.x1, Z.y1], [Z.xx, Z.yy], [Z.x2, Z.y2]])
        });
        X.exit().remove()
    }
    function z(col) {
        ////console.log("z function");
        f.selectAll("rect").attr("fill", function(X) {
            return l(X, "#000", N, "#000")
        });
        B.selectAll("path").attr("stroke", function(X) {
            return l(X, "#aaa", N, "#aaa")
        }).attr("stroke-width", function(X) {
            return l(X, "1.5px", "2.5px", "1px")
        }).attr("opacity", function(X) {
            return l(X, 0.4, 0.75, 0.3)
        }).sort(function(Y, X) {
            if (!k.node) {
                return 0
            }
            var aa = k.map[Y.canonicalKey] ? 1 : 0
              , Z = k.map[X.canonicalKey] ? 1 : 0;
            return aa - Z
        });
        E.selectAll("circle").attr("fill", function(X) {
            if (X === L.node) {
                if(col!=undefined)
                    X.col = col;
                return col
            } else {
                if (X.type === "theme") {
                    return l(X, "#666", N, col)
                } else {
                    if (X.type === "perspective") {
                        return col
                    }
                }
            }
            return l(X, "#000", N, "#999")
        }).attr("stroke", function(X) {
            if (X === L.node) {
                return l(X, null, N, null)
            } else {
                if (X.type === "theme") {
                    return "#000"
                } else {
                    if (X.type === "perspective") {
                        return l(X, "#000", N, "#000")
                    }
                }
            }
            return null
        }).attr("stroke-width", function(X) {
            if (X === L.node) {
                return l(X, null, 2.5, null)
            } else {
                if (X.type === "theme" || X.type === "perspective") {
                    return 1.5
                }
            }
            return null
        });
        E.selectAll("text.label").attr("fill", function(X) {
            return (X === L.node || X.isGroup) ? "#fff" : l(X, "#000", N, "#999")
        })
    }
    function p(X) {
        return X.toLowerCase().replace(/[ .,()]/g, "-")
    }
    function u(X) {
        return X.key
    }
    function l(X, aa, Z, Y) {
        if (k.node === null) {
            return aa
        }
        return k.map[X.key] ? Z : aa
    }
}
        
        
        
    
    var a = 1000
      , c = 900
      , h = c
      , U = 200
      , K = 40
      , S = 20
      , s = 8
      , R = 110
      , J = 30
      , o = 15
      , t = 10
      , w = 1000
      , F = "elastic"
      , N = "#0da4d3";
    var T, q, x, j, H, A, P;
    var L = {
            node: null,
            map: {}
        }
      , k = {};
    var i, y;
    var r = d3.layout.tree().size([360, h / 2 - R]).separation(function(Y, X) {
        return (Y.parent == X.parent ? 1 : 2) / Y.depth
    });
    var W = d3.svg.diagonal.radial().projection(function(X) {
        return [X.y, X.x / 180 * Math.PI]
    });
    var v = d3.svg.line().x(function(X) {
        return X[0]
    }).y(function(X) {
        return X[1]
    }).interpolate("bundle").tension(0.5);
    var d = d3.select("#graph").append("svg").attr("width", a).attr("height", c).append("g").attr("transform", "translate(" + a / 2 + "," + c / 2 + ")").attr("id",main);
    var I = d.append("rect").attr("class", "bg").attr({
        x: a / -2,
        y: c / -2,
        width: a,
        height: c,
        fill: "transparent"
    }).on("click", first);
    
    var B = d.append("g").attr("class", "links")
      , f = d.append("g").attr("class", "episodes")
      , E = d.append("g").attr("class", "nodes");
    var Q = d3.select("#graph-info");
    
/*    var temp = test;
    temp.forEach(function(item,index,array){
        var link = new Array;
        if(index==0){
            link.push("성폭행");
            link.push("행정");
        }
        if(index==1){
            link.push("증인보호");
            link.push("행정");
        }
        if(index==2){
            link.push("집단따돌림");
            link.push("폭행");
        }
        if(index==3){
            link.push("폭행");
            link.push("살인");
        }
        if(index==4){
            link.push("횡령");
            link.push("행정");
            link.push("탈세");
        }
        if(index==5){
            link.push("직무유기");
            link.push("행정");
        }
        if(index==6){
            link.push("살인");
            link.push("행정");
        }
        if(index==7){
            link.push("행정");
        }
        if(index==8){
            link.push("외교");
            link.push("행정");
        }
        if(index==9){
            link.push("부동산");
            link.push("행정");
        }
        if(index==10){
            link.push("살인");
            link.push("행정");
        }
        if(index==11){
            link.push("특수살인");
            link.push("행정");
        }
        if(index==12){
            link.push("탈세");
            link.push("행정");
        }
        if(index==13){
            link.push("성희롱");
        }
        if(index==14){
            link.push("특수살인");
            link.push("행정");
        }
        
        item.links = link;
    });
    
    
    d3.json("/wp-content/themes/conversation_theme/metadata.php", function(X, Y) {
        //console.log(Y);
        Y.episodes = temp;
        T = d3.map(Y);
        q = d3.merge(T.values());*/

/*        x = {};
        A = d3.map();
        q.forEach(function(aa) {

            aa.key = p(aa.name);


            aa.canonicalKey = aa.key;
            x[aa.key] = aa;
            if (aa.group) {
                if (!A.has(aa.group)) {
                    A.set(aa.group, [])
                }
                A.get(aa.group).push(aa)
            }
        });
        j = d3.map();
        T.get("episodes").forEach(function(aa) {
            aa.links = aa.links.filter(function(ab) {
                return typeof x[p(ab)] !== "undefined" && ab.indexOf("r-") !== 0
            });
            j.set(aa.key, aa.links.map(function(ab) {
                var ac = p(ab);
                if (typeof j.get(ac) === "undefined") {
                    j.set(ac, [])
                }
                j.get(ac).push(aa);
                return x[ac]
            }))
        });*/
        var Z = window.location.hash.substring(1);  // hash string을 이용함.
        //console.log(Z);
        if (Z && x[Z]) {
            G(x[Z])
        } else {
            O();
            M()
        }
        window.onhashchange = function() {
            var aa = window.location.hash.substring(1);
            if (aa && x[aa]) {
                G(x[aa], true)
            }
        }
    function O() {
        var lawDecision;
        //console.log("O function");
        if (L.node === null) {
            return
        }
        L = {
            node: null,
            map: {}
        };
        i = Math.floor(630 / T.get("episodes").length);
        y = Math.floor(T.get("episodes").length * i / 2);
        T.get("episodes").forEach(function(af, ae) {
            if (af.name != 'LawDecision') {
                af.x = U / -2;
                af.y = ae * i - y
            } else {
                lawDecision = af;
                T.get("episodes").forEach(function(item, index, array) {
                    if (item.name == 'LawDecision') {
                        T.get("episodes").splice(index, 1);
                    }
                })
            }
        });
        var ad = 0 + J
          , Z = 360 - J
          , ac = (Z - ad) / (T.get("themes").length - 1);
        T.get("themes").forEach(function(af, ae) {
                af.x = Z - ae * ac;
                af.y = h / 2 - R;
                af.xOffset = -S;
                af.depth = 1
        });
        ad = J;
        Z = 180 - J;
//        ac = (Z - ad) / (T.get("perspectives").length - 1);
//        T.get("perspectives").forEach(function(af, ae) {
//            af.x = ae * ac + ad;
//            af.y = h / 2 - R;
//            af.xOffset = S;
//            af.depth = 1
//        });
        H = [];
        var ab, Y, aa, X = h / 2 - R;
        T.get("episodes").forEach(function(ae) {
            ae.links.forEach(function(af) {
                ab = x[p(af)];
                if (!ab || ab.type === "reference") {
                    return
                }
                Y = ((ab.x - 90) * Math.PI / 180);
                aa = ae.key + "-to-" + ab.key;
                H.push({
                    source: ae,
                    target: ab,
                    key: aa,
                    canonicalKey: aa,
                    x1: ae.x + (ab.type === "theme" ? 0 : U),
                    y1: ae.y + K / 2,
                    x2: Math.cos(Y) * X + ab.xOffset,
                    y2: Math.sin(Y) * X
                })
            })
        });
        P = [];
        A.forEach(function(af, ag) {
            var ae = (ag[0].x - 90) * Math.PI / 180;
//console.log(ag[1]);
            a2 = (ag[1].x - 90) * Math.PI / 180,

            bulge = 20;
            P.push({
                x1: Math.cos(ae) * X + ag[0].xOffset,
                y1: Math.sin(ae) * X,
                xx: Math.cos((ae + a2) / 2) * (X + bulge) + ag[0].xOffset,
                yy: Math.sin((ae + a2) / 2) * (X + bulge),
                x2: Math.cos(a2) * X + ag[1].xOffset,
                y2: Math.sin(a2) * X
            })
        });
        window.location.hash = "";
        M()
    }
    
    function G(Y, X) {
        if (L.node === Y && X !== true) {
            if (Y.type === "episode") {
                window.location.href = "/" + Y.slug;
                return
            }
            L.node.children.forEach(function(aa) {
                aa.children = aa._group
            });
            e();
            return
        }
        if (Y.isGroup) {
            ///////////////////////// 이 곳을 수정해야 한다. //////////////////////
            L.node.children.forEach(function(aa) {
                aa.children = aa._group
            });
            Y.parent.children = Y.parent._children;
            
            if(Y.parent.name=="LawDecision"){
                var temp = JSON.parse(JSON.stringify(Y.parent.children));
                var i =1;
                temp.forEach(function(aa){
                    aa.name = "판례" + i++;
                });
                Y.parent.children = temp;
            }
            
            e();
            return
        }
        Y = x[Y.canonicalKey];
        q.forEach(function(aa) {
            aa.parent = null;
            aa.children = [];
            aa._children = [];
            aa._group = [];
            aa.canonicalKey = aa.key;
            aa.xOffset = 0
        });
        L.node = Y;
        L.node.children = j.get(Y.canonicalKey);
        L.map = {};
        var Z = 0;
        L.node.children.forEach(function(ac) {
            //console.log("해당 인물 주변의 원 만큼 반복한다.즉, 판례등은 여기에 속할 것.");
            L.map[ac.key] = true;
            ac._children = j.get(ac.key).filter(function(ad) {
                return ad.canonicalKey !== Y.canonicalKey
            });
            ac._children = JSON.parse(JSON.stringify(ac._children));
            ac._children.forEach(function(ad) {
                ad.canonicalKey = ad.key;
                ad.key = ac.key + "-" + ad.key;
                L.map[ad.key] = true
            });
            var aa = ac.key + "-group"
              , ab = ac._children.length;
            ac._group = [{
                isGroup: true,
                key: aa + "-group-key",
                canonicalKey: aa,
                name: ab,
                count: ab,
                xOffset: 0
            }];
            L.map[aa] = true;
            Z += ab
        });
        L.node.children.forEach(function(aa) {
            aa.children = Z > 50 ? aa._group : aa._children
        });
        window.location.hash = L.node.key;
        e()
    }
    
    function n(d, i) {
        ////console.log("n function");
        k = {
            node: null,
            map: {}
        };
        z()
    }
    function g(X) {
        ////console.log("g function");
        if (k.node === X) {
            return
        }
        k.node = X;
        k.map = {};
        k.map[X.key] = true;
        if (X.key !== X.canonicalKey) {
            k.map[X.parent.canonicalKey] = true;
            k.map[X.parent.canonicalKey + "-to-" + X.canonicalKey] = true;
            k.map[X.canonicalKey + "-to-" + X.parent.canonicalKey] = true
        } else {
            j.get(X.canonicalKey).forEach(function(Y) {
                k.map[Y.canonicalKey] = true;
                k.map[X.canonicalKey + "-" + Y.canonicalKey] = true
            });
            H.forEach(function(Y) {
                if (k.map[Y.source.canonicalKey] && k.map[Y.target.canonicalKey]) {
                    k.map[Y.canonicalKey] = true
                }
            })
        }
        z()
    }
    function M() {
        //console.log("M function");
        V();
        B.selectAll("path").attr("d", function(X) {
            return v([[X.x1, X.y1], [X.x1, X.y1], [X.x1, X.y1]])
        }).transition().duration(w).ease(F).attr("d", function(X) {
            return v([[X.x1, X.y1], [X.target.xOffset * s, 0], [X.x2, X.y2]])
        });
        D(T.get("episodes"));
        b(d3.merge([T.get("themes")]));
        C([]);
        m(P);
        n();
        z()
    }
    function e() {  // 청원을 클릭하다.
        var X = r.nodes(L.node);
        //console.log(X);
        X.forEach(function(Z) {
            if (Z.depth === 1) {
                Z.y -= 20
            }
        });
        H = r.links(X);
        //console.log(H);
        H.forEach(function(Z) {
            if (Z.source.type === "episode") {
                Z.key = Z.source.canonicalKey + "-to-" + Z.target.canonicalKey
            } else {
                Z.key = Z.target.canonicalKey + "-to-" + Z.source.canonicalKey
            }
            Z.canonicalKey = Z.key
        });
        V();
        B.selectAll("path").transition().duration(w).ease(F).attr("d", W);
        D([]);
        b(X);
        C([L.node]);
        m([]);
        var Y = "";
        if (L.node.description) {
            //Y = L.node.description
        }
        Q.html(Y);
        n();
        z()
    }
    function b(X) {
        //console.log("b function");
        var X = E.selectAll(".node").data(X, u);
        var Y = X.enter().append("g").attr("transform", function(aa) {
            var Z = aa.parent ? aa.parent : {
                xOffset: 0,
                x: 0,
                y: 0,
            };
            return "translate(" + Z.xOffset + ",0)rotate(" + (Z.x - 90) + ")translate(" + Z.y + ")"
        }).attr("class", "node").on("mouseover", g).on("mouseout",n).on("click", G);
        Y.append("circle").attr("r", 0)
        Y.append("text").attr("stroke", "#fff").attr("stroke-width", 4).attr("class", "label-stroke");
        Y.append("text").attr("font-size", 0).attr("class", "label")
            .attr("realY",function(Z){return Z.y;})
            .attr("realX",function(Z){return Z.x;});
        X.transition().duration(w).ease(F).attr("transform", function(Z) {
            if (Z === L.node) {
                return null
            }
            var aa = Z.isGroup ? Z.y + (7 + Z.count) : Z.y;
            return "translate(" + Z.xOffset + ",0)rotate(" + (Z.x - 90) + ")translate(" + aa + ")"
        });
        X.selectAll("circle").transition().duration(w).ease(F).attr("r", function(Z) {
            if (Z == L.node) {
                return 100
            } else {
                if (Z.isGroup) {
                    return 7 + Z.count
                } else {
                    return 4.5
                }
            }
        });
        X.selectAll("text.label").transition().duration(w).ease(F).attr("dy", ".3em").attr("font-size", function(Z) {
            if (Z.depth === 0) {
                return 15
            } else {
                return 14
            }
        }).text(function(Z) {
            return Z.name
        }).attr("text-anchor", function(Z) {
            if (Z === L.node || Z.isGroup) {
                return "middle"
            }
            return Z.x < 180 ? "start" : "end"
        }).attr("transform", function(Z) {
            if (Z === L.node) {
                return null
            } else {
                if (Z.isGroup) {
                    return Z.x > 180 ? "rotate(180)" : null
                }
            }
            return Z.x < 180 ? "translate(" + t + ")" : "rotate(180)translate(-" + t + ")"
        })
        X.selectAll("text.label-stroke").attr("display", function(Z) {
            return Z.depth === 1 ? "block" : "none"
        });
        setTimeout(function(){Y.selectAll("text.label").call(wrap,150,function(Z){return Z.realY}),function(Z){return Z.realX}},200);
        X.exit().remove()
    }
    function V() {
        //console.log("V function");
        var Y = d3.selectAll("circle");
        var X = B.selectAll("path").data(H, u);
        X.enter().append("path").attr("d", function(Z) {
            var Y = Z.source ? {
                x: Z.source.x,
                y: Z.source.y
            } : {
                x: 0,
                y: 0
            };
            return W({
                source: Y,
                target: Y
            });
        }).attr("class", "link");
        X.exit().remove()
    }
    function C(Z) {
        //console.log("C function");
        var ac = d.selectAll(".detail").data(Z, u);
        var Y = ac.enter().append("g").attr("class", "detail");
        var ab = Z[0];
        if (ab && ab.type === "episode") {
            var aa = Y.append("a").attr("xlink:href", function(ae) {
                return "/" + ae.slug
            });
            aa.append("text").attr("fill", N).attr("font-size",15).attr("text-anchor", "middle").attr("y", (o + t) * -1).text(function(ae) {
                return "청원 " + ae.episode
            })
        } else {
            if (ab && ab.type === "theme") {
                Y.append("text").attr("font-size",15).attr("fill", "#aaa").attr("text-anchor", "middle").attr("y", (o + t) * -1).text("법률")
            }
        }
        ac.exit().remove();
        //var X = d.selectAll(".all-episodes").data(Z);
        //X.enter().append("text").attr("text-anchor", "start").attr("x", a / -2 + t).attr("y", c / 2 - t).text("all //episodes").attr("class", "all-episodes").on("click", O);
        //X.exit().remove()
    }
    function D(Y) {
        //console.log("D function");
        var Y = f.selectAll(".episode").data(Y, u);
        var X = Y.enter().append("g").attr("class", "episode").on("mouseover", g).on("mouseout", n).on("click", G);
        X.append("rect").attr("x", U / -2).attr("y", K / -2).attr("width", U).attr("height", K-2).transition().duration(w).ease(F).attr("x", function(Z) {
            return Z.x
        }).attr("y", function(Z) {
            return Z.y
        });
        X.append("text").attr("font-size",function(Z){
            return 12;
        }).attr("x", function(Z) {
            return U / -2 + t
        }).attr("y", function(Z) {
            return K / -2 + o
        }).attr("fill", "#fff").text(function(Z) {
            return Z.name
        }).transition().duration(w).ease(F).attr("x", function(Z) {
            return Z.x + t
        }).attr("y", function(Z) {
            return Z.y + 10
        }).attr("realY",function(Z){
            return Z.y;
        }).attr("class","episode");
        Y.selectAll("text").call(wrap,200,function(Z){return Z.realY;},function(Z){return Z.x});
        Y.exit().selectAll("rect").transition().duration(w).ease(F).attr("x", function(Z) {
            return U / -2
        }).attr("y", function(Z) {
            return K / -2
        });
        Y.exit().selectAll("text").transition().duration(w).ease(F).attr("x", function(Z) {
            return U / -2 + t
        }).attr("y", function(Z) {
            return K / -2 + o
        });
        Y.exit().transition().duration(w).remove();
        
    }
    function m(Y) {
        //console.log("m function");
        var X = f.selectAll("path").data(Y);
        X.enter().append("path").attr("d", function(Z) {
            return v([[Z.x1, Z.y1], [Z.x1, Z.y1], [Z.x1, Z.y1]])
        }).attr("stroke", "#000").attr("stroke-width", 1.5).transition().duration(w).ease(F).attr("d", function(Z) {
            return v([[Z.x1, Z.y1], [Z.xx, Z.yy], [Z.x2, Z.y2]])
        });
        X.exit().remove()
    }
    function z() {
        ////console.log("z function");
        f.selectAll("rect").attr("fill", function(X) {
            return l(X, "#000", N, "#000")
        });
        B.selectAll("path").attr("stroke", function(X) {
            return l(X, "#aaa", N, "#aaa")
        }).attr("stroke-width", function(X) {
            return l(X, "1.5px", "2.5px", "1px")
        }).attr("opacity", function(X) {
            return l(X, 0.4, 0.75, 0.3)
        }).sort(function(Y, X) {
            if (!k.node) {
                return 0
            }
            var aa = k.map[Y.canonicalKey] ? 1 : 0
              , Z = k.map[X.canonicalKey] ? 1 : 0;
            return aa - Z
        });
        E.selectAll("circle").attr("fill", function(X) {
            if (X === L.node) {
                return "#000"
            } else {
                if (X.type === "theme") {
                    return l(X, "#666", N, "#000")
                } else {
                    if (X.type === "perspective") {
                        return "#fff"
                    }
                }
            }
            return l(X, "#000", N, "#999")
        }).attr("stroke", function(X) {
            if (X === L.node) {
                return l(X, null, N, null)
            } else {
                if (X.type === "theme") {
                    return "#000"
                } else {
                    if (X.type === "perspective") {
                        return l(X, "#000", N, "#000")
                    }
                }
            }
            return null
        }).attr("stroke-width", function(X) {
            if (X === L.node) {
                return l(X, null, 2.5, null)
            } else {
                if (X.type === "theme" || X.type === "perspective") {
                    return 1.5
                }
            }
            return null
        });
        E.selectAll("text.label").attr("fill", function(X) {
            return (X === L.node || X.isGroup) ? "#fff" : l(X, "#000", N, "#999")
        })
    }
    function p(X) {
        return X.toLowerCase().replace(/[ .,()]/g, "-")
    }
    function u(X) {
        return X.key
    }
    function l(X, aa, Z, Y) {
        if (k.node === null) {
            return aa
        }
        return k.map[X.key] ? Z : aa
    }
    });
}