<!DOCTYPE html>
<html>
<!-- line 221 -->

<head>

  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="robots" content="noindex, nofollow">
  <meta name="googlebot" content="noindex, nofollow">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- * -->
  <script type="text/javascript" src="https://d3js.org/d3.v3.js"></script>
  <link rel="stylesheet" type="text/css" href="http://jsfiddle.net/css/result-light.css">

  <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css">
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>

  <style id="compiled-css" type="text/css">
    /* hide comments */
    #hidden-comments {
      display: none;
    }

    #show-comments {
      margin: 20px 0;
    }

    /* ditem carousel */
    #ditem-container {
      position: relative;
      width: 600px;
      height: 600px;
      margin: 20px auto;
      /* vertical space = (total height - ditem height - height of bottom thing) / 2 */
      padding-top: 65px;
    }

    #ditems {
      margin: 0;
      height: 380px;
    }

    #ditems li {
      list-style: none;
      margin: 0;
      padding: 0;
      display: none;
    }

    #ditems li.first {
      display: block;
    }

    #ditems li>a {
      position: relative;
      display: block;
      width: 750px;
    }

    #ditems li>a:hover {
      border: 0;
    }

    #ditems h2 {
      text-transform: uppercase;
      position: absolute;
      right: 0;
      top: 250px;
      background-color: #fff;
      padding: 10px 30px;
    }

    #ditems li>a h2,
    #ditems li>a .date {
      -webkit-transition: all 0.5s ease;
      -moz-transition: all 0.5s ease;
      -o-transition: all 0.5s ease;
      transition: all 0.5s ease;
    }

    #ditems li>a:hover h2,
    #ditems li>a:hover .date {
      background-color: #000;
      color: #fff;
    }

    #ditems .date {
      position: absolute;
      right: 0;
      top: 300px;
      color: #999;
      background-color: #fff;
      padding: 5px 30px 5px 10px;
    }

    #ditems p {
      margin-top: 20px;
      width: 500px;
    }

    #transport {
      position: absolute;
      top: 410px;
      /* 350 + top pad of container */
      width: 750px;
    }

    #transport a {
      position: absolute;
      height: 30px;
      width: 30px;
      line-height: 30px;
      text-align: center;
      display: block;
      background-color: rgba(0, 0, 0, .5);
      color: #fff;
      z-index: 99;
    }

    #next-ditem {
      right: 0;
    }

    #transport a:hover {
      border: 0;
      background-color: #000;
    }

    #ditem-thumbs {
      position: absolute;
      top: 0;
      background-color: #fff;
      margin: 0;
      width: 750px;
      z-index: 100;
    }

    .conceptmap #ditem-thumbs li {
      list-style: none;
      margin: 0;
      padding: 0;
      display: inline-block;
    }

    .conceptmap #ditem-thumbs li a {
      display: block;
      border: 6px solid #fff;
    }

    .conceptmap #ditem-thumbs li a:hover {
      border-color: #0da4d3;
    }

    .conceptmap #controls {
      margin-top: 20px;
      width: 750px;
    }

    .conceptmap #controls .btn {
      position: relative;
      float: right;
      margin-left: 10px;
      z-index: 99;
    }

    /* map */
    /* 사각형 텍스트 */
    .conceptmap svg {
      font-family: Abel, "Helvetica Neue", Helvetica, Arial, sans-serif;
      font-size: 14px;
    }

    .conceptmap .ditem>rect {
      stroke: #fff;
      stroke-width: 1.5px;
    }

    .conceptmap path {
      fill: none;
    }

    .conceptmap .ditem,
    .conceptmap .node,
    .conceptmap .detail text,
    .conceptmap .all-ditems {
      cursor: pointer;
    }

    .conceptmap .all-ditems {
      fill: #aaa;
    }

    .conceptmap .detail a text:hover,
    .conceptmap text.all-ditems:hover {
      text-decoration: underline;
    }

    body {
      padding-top: 10px;
    }

    .NodeLabel {
      color: Blue;
      text-decoration: underline;
      cursor: pointer;
    }

    .style1 {
      width: 400px;
    }
  </style>


  <!-- TODO: Missing CoffeeScript 2 -->



  <script type="text/javascript">
    window.onload = function() {
    var ditems = <%-test1%>;
    var themes = <%-test2%>;
    var articles = <%-test3%>;
    var fdata = {ditems, themes};
// 다음 d3.json 함수는 쓰이지 않음
      d3.json('/data/ditems.json', function(error, data) {
        if (error) throw error;
//        var array1 = new Array();
//        var array2;
         for(var k = 0; k < ditems.length; k++){
            var temp = ditems[k].links.split(",");
            for(var i = 0; i < ditems[k].num; i++){
                temp[i] = temp[i].replace('"', "");
                temp[i] = temp[i].replace('"', "");
                temp[i] = temp[i].replace('[', "");
                temp[i] = temp[i].replace(']', "");
            }
            ditems[k].links = temp;
            name = ditems[k].name.slice(0, 18) + "...";
            console.log(name)
            ditems[k].name = name;
        }

        //for(var k = 0; k < ditems.length;k++){
        //   array2 = new Array();
        //    for( var i = 0; i < ditems[k].num; i++){
        //        array2[i] = ditems[k].links.slice(2+6*i,5+6*i);
        //    }
        //    array1[k] = array2;
        //}
        //for(var k = 0; k < ditems.length; k++){
        //    ditems[k].links = array1[k]
        //}
        fdata = {ditems, themes, articles};
        
        console.log(fdata)
        flaredata = fdata;
        //console.log(flaredata);
        //flaredata = data;
        // = {
        // 사각형  
        // "ditems":[]
        // // 동그라미
        // "themes": []
        // };

        $(function() {
          plotConceptMap();
        });

        function plotConceptMap() {

          var plot = ConceptMap("graph", "graph-info", flaredata);
        }

        //ConceptMap.js
        function ConceptMap(chartElementId, infoElementId, dataJson) {
            console.log("ConceptMap시작");
          var width = document.body.clientWidth; //window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
          var height = 700; // window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
          var a = width,
            c = height,
            h = c,
            //사각형 가로
            U = 200,
            //사각형 세로
            K = 32,
            S = 20,
            s = 8,
            R = -30, // Radius for node circle 110
            J = 30,
            o = 15,
            t = 10,
            w = 1000,
            F = "elastic",
            //hover, fill 색깔.
            N = "#0da4d3";
          var T, q, x, j, H, A, P;
          var L = {},
            k = {};
          var i, y;
          var r = d3.layout.tree().size([360, h / 2 - R]).separation(function(Y, X) {
            return (Y.parent == X.parent ? 1 : 2) / Y.depth
          });
          var W = d3.svg.diagonal.radial().projection(function(X) {
            return [X.y, X.x / 180 * Math.PI]
          });
          var v = d3.svg.line().x(function(X) {
            return X[0]
          }).y(function(X) {
            return X[1]
          }).interpolate("bundle").tension(0.5);
          //Node name at Footer
          var Nh = (c / 2) + 100;
          var svgHeight = c + 250;
          var d = d3.select("#" + chartElementId).append("svg").attr("width", a).attr("height", svgHeight).append("g").attr("transform", "translate(" + a / 2 + "," + Nh + ")");
          var I = d.append("rect").attr("class", "bg").attr({
            x: a / -2,
            y: c / -2,
            width: a,
            height: c,
            fill: "transparent"
          }).on("click", O);
          var B = d.append("g").attr("class", "links"),
            f = d.append("g").attr("class", "ditems"),
            E = d.append("g").attr("class", "nodes");

          var Q = d3.select("#" + infoElementId);

          T = d3.map(dataJson);
          q = d3.merge(T.values());
          x = {};
          A = d3.map();

          /**********************/
          var outerId = [0];
          /**********************/

          q.forEach(function(aa) {
            //console.dir(aa);
            aa.key = p(aa.name);
            aa.canonicalKey = aa.key;
                // console.log("aa.key : " + aa.key);
            x[aa.key] = aa;
                // console.log("aa.canonicalKey : " + aa.canonicalKey);
            if (aa.group) {
              if (!A.has(aa.group)) {
                A.set(aa.group, [])
              }
              A.get(aa.group).push(aa);
            }
          });

          /***********Used for Node color on mouse over=Start**********/
          j = d3.map();

          T.get("ditems").forEach(function(aa) {
                aa.links = aa.links.filter(function(ab) {
                    return typeof x[p(ab)] !== "undefined" //&& ab.indexOf("r-") !== 0
                });

                j.set(aa.key, aa.links.map(function(ab) {
                    var ac = p(ab);
                if (typeof j.get(ac) === "undefined") {
                    j.set(ac, [])
                }
                    j.get(ac).push(aa);
                    return x[ac];
                }));
          });
          /*********Used for Node color on mouse over- End***********/
          var Z = window.location.hash.substring(1);
          if (Z && x[Z]) {
              G(x[Z]);
          } else {
                O();
                M();
          }

          window.onhashchange = function() {
                var aa = window.location.hash.substring(1);
                if (aa && x[aa]) {
                    
//                    G(x[aa], true, dataJson.articles)
                    G(x[aa], true)
                }
          };

          function O() {
            // console.log("O함수")
            if (L.node === null) {
              return
            }
            L = {
              node: null,
              map: {}
            };
            i = Math.floor(c / T.get("ditems").length);
            y = Math.floor(T.get("ditems").length * i / 2);
            T.get("ditems").forEach(function(af, ae) {
              af.x = U / -2;
              af.y = ae * i - y
            });
            //Half circular nodes var ad = 180 + J,
            // Full Circular nodes var ad = 0 + J,
            var ad = 0 + J,
              // Z = 360 - J,
              Z = 360 - J,
              ac = (Z - ad) / (T.get("themes").length - 1);
            T.get("themes").forEach(function(af, ae) {
              /*Node with rectangle= start*/
              af.x = Z - ae * ac;
              af.y = h / 2 - R;
              //            af.xOffset = -S;
              af.xOffset = -S;
              af.depth = 1
              /*Node with rectange= End*/
            });
            //  ad = J;
            //  Z = 180 - J;
            //        ac = (Z - ad) / (T.get("perspectives").length - 1);
            //        T.get("perspectives").forEach(function (af, ae) {
            //            af.x = ae * ac + ad;
            //            af.y = h / 2 - R;
            //            af.xOffset = S;
            //            af.depth = 1
            //        });
            // New Code

            H = [];
            var ab, Y, aa, X = h / 2 - R;
            T.get("ditems").forEach(function(ae) {
              ae.links.forEach(function(af) {
                ab = x[p(af)];
                if (!ab || ab.type === "reference") {
                  return
                }
                Y = (ab.x - 90) * Math.PI / 180;
                aa = ae.key + "-to-" + ab.key;
                H.push({
                  source: ae,
                  target: ab,
                  key: aa,
                  canonicalKey: aa,
                  x1: ae.x + (ab.type === "theme" ? 0 : U),
                  y1: ae.y + K / 2,
                  x2: Math.cos(Y) * X + ab.xOffset,
                  y2: Math.sin(Y) * X
                })
              })
            });
            P = [];
            A.forEach(function(af, ag) {
              var ae = (ag[0].x - 90) * Math.PI / 180;
              //a2 = (ag[1].x - 90) * Math.PI / 180, bulge = 20;
              P.push({
                x1: Math.cos(ae) * X + ag[0].xOffset,

                y1: Math.sin(ae) * X //,
                //xx: Math.cos((ae + a2) / 2) * (X + bulge) + ag[0].xOffset,
                // yy: Math.sin((ae + a2) / 2) * (X + bulge),
                // x2: Math.cos(a2) * X + ag[1].xOffset,
                //  y2: Math.sin(a2) * X
              })
            });
            window.location.hash = "";
            M()
          }
            
          function G(Y, X) {
            // console.log("G함수")
//          console.log(JSON.stringify(dataJson.articles[Y.ditem]));
            if (L.node === Y && X !== true) {
              if (Y.type === "ditem") {
                // * 주요 내용 연결 부분
                // window.location.href = "/" + Y.slug;

//                window.location.href = "/data/haha.html"
                  var article = (dataJson.articles[Y.ditem].detail).split("주요내용");
                  var newWindow = window.open("", "MsgWindow", "width=600, height=250");
                    newWindow.document.write(article[1]);
//                 window.location.hash = "#!haha";
//                   fetch('/data/ditems.json').then(function(response) {
//                     response.text().then(function(text) {
//                       document.querySelector('body').innerHTML = text;
//                       console.log(text);
//                     })
//                   })
                return
              }
              L.node.children.forEach(function(aa) {
                aa.children = aa._group
              });
              e();
              return
            }
            if (Y.isGroup) {
              L.node.children.forEach(function(aa) {
                aa.children = aa._group
              });
              Y.parent.children = Y.parent._children;
              e();
              return
            }
            Y = x[Y.canonicalKey];
            q.forEach(function(aa) {
              aa.parent = null;
              aa.children = [];
              aa._children = [];
              aa._group = [];
              aa.canonicalKey = aa.key;
              aa.xOffset = 0
            });
            L.node = Y;
            L.node.children = j.get(Y.canonicalKey);
            L.map = {};
            var Z = 0;
            L.node.children.forEach(function(ac) {
              L.map[ac.key] = true;
              ac._children = j.get(ac.key).filter(function(ad) {
                return ad.canonicalKey !== Y.canonicalKey
              });
              ac._children = JSON.parse(JSON.stringify(ac._children));
              ac._children.forEach(function(ad) {
                ad.canonicalKey = ad.key;
                ad.key = ac.key + "-" + ad.key;
                L.map[ad.key] = true
              });
              var aa = ac.key + "-group",
                ab = ac._children.length;
              ac._group = [{
                isGroup: true,
                key: aa + "-group-key",
                canonicalKey: aa,
                name: ab,
                count: ab,
                xOffset: 0
              }];
              L.map[aa] = true;
              Z += ab
            });
            L.node.children.forEach(function(aa) {
              aa.children = Z > 50 ? aa._group : aa._children
            });
            window.location.hash = L.node.key;
            e()
          }

          function n() {
            // console.log("n함수")
            k = {
              node: null,
              map: {}
            };
            z()
          }

          function g(X) {
            // console.log("g함수")
            if (k.node === X) {
              return
            }
            k.node = X;
            k.map = {};
            k.map[X.key] = true;
            if (X.key !== X.canonicalKey) {
              k.map[X.parent.canonicalKey] = true;
              k.map[X.parent.canonicalKey + "-to-" + X.canonicalKey] = true;
              k.map[X.canonicalKey + "-to-" + X.parent.canonicalKey] = true
            } else {
              j.get(X.canonicalKey).forEach(function(Y) {
                k.map[Y.canonicalKey] = true;
                k.map[X.canonicalKey + "-" + Y.canonicalKey] = true
              });
              H.forEach(function(Y) {
                if (k.map[Y.source.canonicalKey] && k.map[Y.target.canonicalKey]) {
                  k.map[Y.canonicalKey] = true
                }
              })
            }
            z()
          }

          function M() {
            // console.log("M함수")
            V();
            B.selectAll("path").attr("d", function(X) {
              return v([
                [X.x1, X.y1],
                [X.x1, X.y1],
                [X.x1, X.y1]
              ])
            }).transition().duration(w).ease(F).attr("d", function(X) {
              return v([
                [X.x1, X.y1],
                [X.target.xOffset * s, 0],
                [X.x2, X.y2]
              ])
            });
            D(T.get("ditems"));
            //        b(d3.merge([T.get("themes"), T.get("perspectives")]));
            b(T.get("themes"));
            C([]);
            m(P);
            //Q.html('<a href="/the-concept-map/">What\'s this?</a>');
            n();
            z()
          }

          // onclick
          function e() {
            // console.log("e함수")
            // console.log("this is function e. onclick");
            var X = r.nodes(L.node);
            X.forEach(function(Z) {
              if (Z.depth === 1) {
                Z.y -= 20
              }
            });
            H = r.links(X);
            H.forEach(function(Z) {
              if (Z.source.type === "ditem") {
                Z.key = Z.source.canonicalKey + "-to-" + Z.target.canonicalKey
              } else {
                Z.key = Z.target.canonicalKey + "-to-" + Z.source.canonicalKey
              }
              Z.canonicalKey = Z.key
            });
            V();
            B.selectAll("path").transition().duration(w).ease(F).attr("d", W);
            D([]);
            b(X);
            C([L.node]);
            m([]);
            var Y = "";
            if (L.node.description) {
              Y = L.node.description
            }
            // Node Click Start
            if (L.node.name) {
              // console.log(L.node.name);
              BindGridView(L.node.name);
            }
            // Node Click End
            Q.html(Y);
            n();
            z()
          }

          function b(X) {
            // console.log("b함수")
            var X = E.selectAll(".node").data(X, u);
            var Y = X.enter().append("g").attr("transform", function(aa) {
              var Z = aa.parent ? aa.parent : {
                xOffset: 0,
                x: 0,
                y: 0
              };
              return "translate(" + Z.xOffset + ",0)rotate(" + (Z.x - 90) + ")translate(" + Z.y + ")"
            }).attr("class", "node").on("mouseover", g).on("mouseout", n).on("click", G);
            Y.append("circle").attr("r", 0);
            Y.append("text").attr("stroke", "#fff").attr("stroke-width", 4).attr("class", "label-stroke");
            Y.append("text").attr("font-size", 0).attr("class", "label");
            X.transition().duration(w).ease(F).attr("transform", function(Z) {
              if (Z === L.node) {
                return null
              }
              var aa = Z.isGroup ? Z.y + (7 + Z.count) : Z.y;
              return "translate(" + Z.xOffset + ",0)rotate(" + (Z.x - 90) + ")translate(" + aa + ")"
            });
            X.selectAll("circle").transition().duration(w).ease(F).attr("r", function(Z) {
              if (Z == L.node) {
                return 100
              } else {
                if (Z.isGroup) {
                  return 7 + Z.count
                } else {
                  return 4.5
                }
              }
            });
            X.selectAll("text").transition().duration(w).ease(F).attr("dy", ".3em").attr("font-size", function(Z) {
              if (Z.depth === 0) {
                return 20
              } else {
                return 15
              }
            }).text(function(Z) {
                var text = Z.name
                return text
            }).attr("text-anchor", function(Z) {
              if (Z === L.node || Z.isGroup) {
                return "middle"
              }
              return Z.x < 180 ? "start" : "end"
            }).attr("transform", function(Z) {
              if (Z === L.node) {
                return null
              } else {
                if (Z.isGroup) {
                  return Z.x > 180 ? "rotate(180)" : null
                }
              }
              return Z.x < 180 ? "translate(" + t + ")" : "rotate(180)translate(-" + t + ")"
            });
            X.selectAll("text.label-stroke").attr("display", function(Z) {
              return Z.depth === 1 ? "block" : "none"
            });
            X.exit().remove()
          }

          function V() {
            // console.log("V함수")
            var X = B.selectAll("path").data(H, u);
            X.enter().append("path").attr("d", function(Z) {
              var Y = Z.source ? {
                x: Z.source.x,
                y: Z.source.y
              } : {
                x: 0,
                y: 0
              };
              return W({
                source: Y,
                target: Y
              })
            }).attr("class", "link");
            X.exit().remove()
          }

          function C(Z) {
            // console.log("C함수")
            var ac = d.selectAll(".detail").data(Z, u);
            var Y = ac.enter().append("g").attr("class", "detail");
            var ab = Z[0];
           
            ac.exit().remove();
            //var X = d.selectAll(".all-ditems").data(Z);
            //X.enter().append("text").attr("text-anchor", "start").attr("x", a / -2 + t).attr("y", c / 2 - t).text("all data").attr("class", "all-ditems").on("click", O);
            //X.exit().remove()
          }

          function D(Y) {
            // console.log("D함수")
            var Y = f.selectAll(".ditem").data(Y, u);
            var X = Y.enter().append("g").attr("class", "ditem").on("mouseover", g).on("mouseout", n).on("click", G);
            X.append("rect").attr("x", U / -2).attr("y", K / -2).attr("width", U).attr("height", K).transition().duration(w).ease(F).attr("x", function(Z) {
              return Z.x
            }).attr("y", function(Z) {
              return Z.y
            });
            X.append("text").attr("x", function(Z) {
              return U / -2 + t
            }).attr("y", function(Z) {
              return K / -2 + o
            }).attr("fill", "#fff").text(function(Z) {
              // Remove / from Text
              var n = Z.name.lastIndexOf('/');
              var PageName = Z.name.substring(n + 1);
              return PageName
              //return Z.name
            }).transition().duration(w).ease(F).attr("x", function(Z) {
              return Z.x + t
            }).attr("y", function(Z) {
              return Z.y + o
            });
            Y.exit().selectAll("rect").transition().duration(w).ease(F).attr("x", function(Z) {
              return U / -2
            }).attr("y", function(Z) {
              return K / -2
            });
            Y.exit().selectAll("text").transition().duration(w).ease(F).attr("x", function(Z) {
              return U / -2 + t
            }).attr("y", function(Z) {
              return K / -2 + o
            });
            Y.exit().transition().duration(w).remove()
          }

          function m(Y) {
            // console.log("m함수")
            var X = f.selectAll("path").data(Y);
            X.enter().append("path").attr("d", function(Z) {
              return v([
                [Z.x1, Z.y1],
                [Z.x1, Z.y1],
                [Z.x1, Z.y1]
              ])
            }).attr("stroke", "#000").attr("stroke-width", 1.5).transition().duration(w).ease(F).attr("d", function(Z) {
              return v([
                [Z.x1, Z.y1],
                [Z.xx, Z.yy],
                [Z.x2, Z.y2]
              ])
            });
            X.exit().remove()
          }

          function z() {
            // console.log("z함수")
            f.selectAll("rect").attr("fill", function(X) {
              return l(X, "#000", N, "#000")
            });
            B.selectAll("path").attr("stroke", function(X) {
              return l(X, "#aaa", N, "#aaa")
            }).attr("stroke-width", function(X) {
              return l(X, "1.5px", "2.5px", "1px")
            }).attr("opacity", function(X) {
              return l(X, 0.4, 0.75, 0.3)
            }).sort(function(Y, X) {
              if (!k.node) {
                return 0
              }
              var aa = k.map[Y.canonicalKey] ? 1 : 0,
                Z = k.map[X.canonicalKey] ? 1 : 0;
              return aa - Z
            });
            E.selectAll("circle").attr("fill", function(X) {
              if (X === L.node) {
                return "#000"
              } else {
                // 동그라미 색깔 디폴트 #666
                if (X.type === "theme") {
                var color = "#666";
                switch (X.party) {
                case "0":
                  color =  "#0C4CBA"; // 민주당
                  break;
                case "1":
                  color =  "#E2635A"; // 한국당
                  break;
                case "2":
                  color =  "#97D5E0"; // 바른미래
                  break;
                case "3":
                  color =  "#C4D18B"; // 평화당
                  break;
                case "4":
                  color =  "#F6D258"; // 정의당
                  break;
                case "5":
                  color =  "#330066"; // 애국당
                  break;
                case "6":
                  color =  "#FF9933"; // 민중당
                  break;
                case "7":
                  color =  "#333333"; // 무소속
                  break;
              }
                  // *  return l(X, "#666", N, "#000")
                  return l(X, color, N, "#333")
                } //else {
                //                    if (X.type === "perspective") {
                //                        return "#fff"
                //                    }
                // }
                // New code

              }
              return l(X, "#000", N, "#999")
            }).attr("stroke", function(X) {
              if (X === L.node) {
                return l(X, null, N, null)
              } else {
                if (X.type === "theme") {
                  // 동그라미 테두리 색깔
                  return "#000"
                } else {
                  //                    if (X.type === "perspective") {
                  //                        return l(X, "#000", N, "#000")
                  //                    }

                }
              }
              return null
            }).attr("stroke-width", function(X) {
              if (X === L.node) {
                return l(X, null, 2.5, null)
              } else {
                //                if (X.type === "theme" || X.type === "perspective") {
                //                    return 1.5
                //                }
                if (X.type === "theme") {
                  return 1.5
                }
              }
              return null
            });
            E.selectAll("text.label").attr("fill", function(X) {
              return (X === L.node || X.isGroup) ? "#fff" : lf(X, "#000", N, "#999")
              // * lf 함수로 가장자리 글씨를 검정색으로
              //l(X, "#000", N, "#999")
            })
          }

          function p(X) {
            // console.log("p함수")
            return X.toLowerCase().replace(/[ .,()]/g, "-")
          }

          function u(X) {
            // console.log("u함수")
            return X.key
          }
          // *
          function lf(X, aa, Z, Y) {
            // console.log("lf함수")
            if (k.node === null) {
              // * object 출력시 Object.values(). 대문자O임
              // console.log("X : " + Object.values(X));
              // if(X.name=="1to1media.com") return "#ddd";
              return aa
            }
            // console.log("this is k.map[X.key]");
            return k.map[X.key] ? Z : aa
          };

          function l(X, aa, Z, Y) {
            // console.log("l함수")
            if (k.node === null) {
              return aa
            }
            return k.map[X.key] ? Z : aa
          }
            
            function wrap(d) {
                    var text = d3.select(this),
                        width = d.r * 2,
                        x = d.x,
                        y = d.y,
                        words = text.text().split(/\s+/).reverse(),
                        word,
                        line = [],
                        lineNumber = 0,
                        lineHeight = 1.1,
                        tspan = text.text(null).append("tspan").attr("x", x).attr("y", y);
                    while (word = words.pop()) {
                        line.push(word);
                        tspan.text(line.join(" "));
                        if (tspan.node().getComputedTextLength() > width) {
                            line.pop();
                            tspan.text(line.join(" "));
                            line = [word];
                            tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + "em").text(word);
                      }
                    }
                }
        };

        //Package.js

        (function() {
          packages = {

            // Lazily construct the package hierarchy from class names.
            root: function(classes) {
              var map = {};

              function find(name, data) {
                var node = map[name],
                  i;
                if (!node) {
                  node = map[name] = data || {
                    name: name,
                    children: []
                  };
                  if (name.length) {
                    node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
                    node.parent.children.push(node);
                    node.key = name.substring(i + 1);
                  }
                }
                return node;
              }

              classes.forEach(function(d) {
                find(d.name, d);
              });

              return map[""];
            },

            // Return a list of imports for the given array of nodes.
            imports: function(nodes) {
              var map = {},
                imports = [];

              // Compute a map from name to node.
              nodes.forEach(function(d) {
                map[d.name] = d;
              });

              // For each import, construct a link from the source to target node.
              nodes.forEach(function(d) {
                if (d.imports) d.imports.forEach(function(i) {
                  imports.push({
                    source: map[d.name],
                    target: map[i]
                  });
                });
              });

              return imports;
            }

          };
        })();

      });
    }
  </script>

</head>

<body>
  <div id="graph" class="conceptmap">
  </div>
  <div id="graph-info">
  </div>

  <script>
    // tell the embed parent frame the height of the content
    if (window.parent && window.parent.parent) {
      window.parent.parent.postMessage(["resultsFrame", {
        height: document.body.getBoundingClientRect().height,
        slug: "zshmxx3y"
      }], "*")
    }
  </script>
</body>

<!-- * -->
<!-- footer tag는 문서에 대한 꼬릿말임. 꼭 문서에 끝에 올 필요는 없음 -->
<footer>

</footer>

</html>